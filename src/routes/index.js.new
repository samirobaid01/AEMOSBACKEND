const express = require('express');
const deviceRoutes = require('./deviceRoutes');
const organizationRoutes = require('./organizationRoutes');
const areaRoutes = require('./areaRoutes');
const sensorRoutes = require('./sensorRoutes');
const authRoutes = require('./authRoutes');
const sequelize = require('../config/database');

const router = express.Router();

// Basic health check route
router.get('/health', async (req, res) => {
  const checks = {
    status: 'ok',
    timestamp: new Date(),
    services: {
      database: { status: 'checking' }
    }
  };
  
  try {
    await sequelize.authenticate();
    checks.services.database.status = 'ok';
  } catch (error) {
    checks.services.database.status = 'error';
    checks.services.database.message = error.message;
    checks.status = 'error';
  }
  
  const statusCode = checks.status === 'ok' ? 200 : 500;
  res.status(statusCode).json(checks);
});

router.get('/health/ready', (req, res) => {
  res.status(200).json({ status: 'ready' });
});

router.get('/health/live', (req, res) => {
  res.status(200).json({ status: 'alive' });
});

// Authentication routes
router.use('/auth', authRoutes);

// API v1 routes
router.use('/devices', deviceRoutes);
router.use('/organizations', organizationRoutes);
router.use('/areas', areaRoutes);
router.use('/sensors', sensorRoutes);

// Handle undefined routes
router.all('*', (req, res) => {
  res.status(404).json({
    status: 'error',
    message: `Cannot find ${req.originalUrl} on this server!`
  });
});

module.exports = router; 